Глава 1. Каскадность, специфичность и наследование			


	1.1. Каскадность стр. 31

	 Разрешение противоречий в стилях (каскадность) происходит в следующей последовательности:

	1. Определяется источник стилей;
	2. Определяется специфичность;
	3. Определяется исходный порядок.

	Каскадность работает в данном порядке от 1 до 3 пока не разрешится конфликт. 

	Css  правило состоит из селектора и блока объявлений, который состоит из свойств и значений.


	1.1.1. Источник стилей стр. 33

	Источники стилей в порядка приоритета:

	1. Авторские;
	2. Пользовательские;
	3. Браузерные.

	color: red !important; Объявление с этим словом обладает более высоким приорететом.
	

	1.1.2. Специфичность селекторов стр. 36

	Браузер оценивает специфичность в 2 этапа:

	1. Проверяются стили встроенные в HTML;
	2. Проверяются стили, применяемые с помощю селектров.

	У встроенных стилей специфичность выше.
	Что бы переопределить встроенные стили нужно использовать !important. Если !important используется во встроенных стилях переопределить их свойства невозможно.

	Правила специфичности селекторов:

	1. Наиболее специфичный селектор идентификатора, чем больше идентификаторов, тем специфичнее селектор;
	2. Далее идет селектор с наибольшим количеством классов;
	3. Последний селектор с наибольшим количеством тегов.

	Селекторы псевдоклассов и селекторы атрибутов спецефичны как и селектор класса. Универсальный селектор * и комбинаторы не влияют на специфичность.

	Обычно специфичность выражают ввиде числа 0 1 2 1 (0 встроенные стили, 1 идентификаторы, 2 классы, 1 тэги).


	1.1.3. Исходный порядок стр. 41

	Если источник и уровень специфичности одинаковый, то объявление установленное позже имеет больший приоритет.

	Форматирование ссылок и исходный порядок:
	a:link{}
	a:visited{}
	a:hover{}
	a:active{}
	Порядок имеет значение: непосещенная, посещенная, наведение, активная.

	Объявление которое "побеждает" каскадность называется каскадным значением.

	Два правила:

	- Не использовать идентификатор в селекторе;
	- Не использовать !important.


	1.2. Наследование

	Еще один принцип по которому к элементу применяются стили.
	Но не все свойства наследуются, в основном, это свойства, которые отвечают за шрифты и свойства списков, границ таблиц.


	1.3. Специальные значения

	Существуют два спец значения которые можно применять к любому свойству, что бы управлять каскадностью: inherit initial.

	1.3.1. Ключевое слово inherit

	Когда необходимо унаследовать стиль, который замещается каскадным значением.

	.footer a{
	color: inherit;//наследует от родителя .footer
	text-decoration: underline;
	}

	1.3.2. Ключевое слово initial

	Присваивает значение по умолчанию.


	1.4.1. Остерегайтесь сокращений скрыто переопределяющие другие стили

	Пропущеные свойства все равно задаются им присваиваются начальные значения. Это может переопределить стили на транице.


							Итоги главы:

	- Контролируйте специфичность селекторов;
	- Не путайте каскадность с наследованием;
	- Некоторые свойства наследуются в том числе для текста, списков и границ таблиц;
	- Не путайте значения initial и auto;
	- Остерегайтесь сокращений скрыто переопределяющие другие стили. 
	